LINK DE ACTIVACION DE CUENTA
----------------------------

Cuando rellenamos una plantilla de registro, al introducir un correo, lo que tiene que hacer es enviar un correo con
un link para activar la cuenta.

Hasta que no haga ese proceso el status será inactivo, por lo que, habrá que agregar la lógica para enviar ese
link.

vamos a acounts/views.py...

la lógica la tenemos aquí...

        if form.is_valid(): # si ha pasado la validacion
            # capturamos los datos
            first_name = form.cleaned_data['first_name']
            last_name = form.cleaned_data['last_name']
            phone_number = form.cleaned_data['phone_number']
            email = form.cleaned_data['email']
            password = form.cleaned_data['password']

            # para el user name vamos a capturar el email y sobre él lo vamos a hacer
            username = email.split('@')[0]

            # instancia al usuario
            user = Account.objects.create_user(first_name=first_name, last_name=last_name, email=email,
                                               username=username, password=password)
            user.phone_number = phone_number
            user.save()

Vamos a necesitar todas estas librerias....

# importamos las clases para el envio del correo
from django.contrib.sites.shortcuts import  get_current_site
from django.template.loader import render_to_string
from django.utils.http import urlsafe_base64_encode, urlsafe_base64_decode
from django.contrib.auth.tokens import default_token_generator
from django.utils.encoding import force_bytes
from django.core.mail import EmailMessage


# creamos el proceso de envio de correo
            current_site = get_current_site(request) --> recogemos los datos
            mail_subject = 'Por favor activa tu cuenta....' --> el titulo del correo
            body = render_to_string('acounts/acounts_verification_email.html', { --> donde está el template y lo que necesitamos
      <---      'user': user,  # el nombre y datos del usuario
      <---      'domain': current_site,  # le vamos a pasar nuestro dominio
      <---      'uid': urlsafe_base64_encode(force_bytes(user.pk)),  # va a codificar como  adas34523d
      <---      'token': default_token_generator.make_token(user), --> le generamos un token también
                })
            to_email = email
            send_mail = EmailMessage(mail_subject, body, to=[to_email]) --> lo que vamos a poner en el correo
            send_mail.send() ---> envio del correo

            messages.success(request, 'Se ha registrado correctamente')
            return redirect('register')

Una vez generado el código guardamos y ahora nos vamos a template/account y creamos acounts_verification_email.html



{% autoescape off %} ---> lo creamos como seguridad para evitar un scripting
  Hola {{user.first_name }} --> le pasamos el user

  Por favor, activa tu cuenta dandole click al siguiente link:

  http://{{domain}}{% url 'activate' uidb64=uid token=token %} --> y el resto de parametros definidos arriba
 \__________________________________________________________________________________________________________/
                                    este es el link
  Nos vemos pronto, saludos de PSR

{% endautoescape %}

Guardamos y ahora tenemos que configurar una cuenta de correo electronico....

Vamos a ecommerce/settings.py

después de ....

from django.contrib.messages import constants as messages
MESSAGE_TAGS = {
    messages.ERROR: 'danger',
}

# Configuración cuenta correo para activación cuentas usuario
EMAIL_HOST = 'stmp.gmail.com' --> lo va a dirigir a gmail.com
EMAIL_PORT = 587
EMAIL_HOST_USER = ''    ---> le colocamos el correo
EMAIL_HOST_PASSWORD = '' --> le colocamos el password
EMAIL_USE_TLS = True

CREACIÓN DEL LINK Y ENVIO DE EMAIL DE CONFIRMACIÓN
--------------------------------------------------

Hemos definido el link para la activación de cuenta...

     http://{{domain}}{% url 'activate' uidb64=uid token=token %}
                              \_______/ \_________/\__________/
                               path         param1     param2


Tenemos que crear el path, para ello vamos a account/urls.py

urlpatterns = [
    path('register/', views.register, name='register'),
    path('login/', views.login, name='login'),
    path('logout/', views.logout, name='logout'),
    path('activate/<uidb64>/<token>/', views.activate, name='activate'), -->
]

Guardamos y ahora vamos a accounts/views.py y creamos la función activate

def activate(request, uidb64, token):   # esto se hará cuando el usuario le de al click de activar la cuenta
    try:
        uid = urlsafe_base64_decode(uidb64).decode() --> recoge el uid codificado para que lo descodifique
        user = Account._default_manager.get(pk=uid) ---> le va a dar la id
    except(TypeError, ValueError, OverflowError, Account.DoesNotExist): ---> si da algú error
        user = None

    if user is not None and default_token_generator.check_token(user, token): --> si no está vacio el usuario
        user.is_active = True
        user.save()
        messages.success(request, 'Tu cuenta ya está activa')
        return redirect('login')
    else:
        messages.error(request, 'La activación ha dado algún tipo de error')
        return redirect('register')

Guardamos y en teoría ya lo tendriamos....

Cuando estamos en la página de registro, rellenamos los datos y le damos a registrar pulsando el click de registrar, lo
que vamos a hacer es que cuando le demos a registrar limpiamos y le mostramos una pantalla que le indique que se le ha
enviado un email de verificación.

Para ello vamos a accounts/views.py

def register(request):
.......

    messages.success(request, 'Se ha registrado correctamente')
    return redirect('register')

Vamos a cambiar esto, y hacer que vaya a otro template y me informe que se ha enviado el correo...

     return redirect('/accounts/login/?command=Verification&email='+email)

Aquí lo que está sucediendo es que cuando registre al usuario me redireccione a la página de login con estos 2
paramentos Verification y email.

Pero claro, no quiero que me aparezca el template de login, sino un template que me diga que se ha enviado el correo,

Vamos a la carpeta de templates/acounts/login.html

linea 7
<!-- ============================ COMPONENT LOGIN   ================================= -->

<!-- ========================= SECTION CONTENT ========================= -->
<section class="section-conten padding-y" style="min-height:84vh">

    {% if request.GET.command == 'verification' %}
        <div class="container mx-auto alert alert-info" role="alert" style="max-width=380px; margin-top=100px;">
            Muchas gracias por registrarte en nuestra página, revisa tu correo para activar tu cuenta [{{request.GET.email}}]
            <br><<br>
            Si verificaste la cuenta, puedes ir a login <a href="{% url 'login'%}">Login</a>
        </div>

    {% else %}

<!-- ============================ COMPONENT LOGIN   ================================= -->


Aqui iria lo que ya hemos hecho de login

<!-- ============================ COMPONENT LOGIN  END.// ================================= -->
    {% endif %}

Guardamos y probamos....

Puede dar un error de STMAP debido a que gmail me indica que tengo que hacer menos segura esta cuenta, para ello vamos
a este link
http://myaccount.google.com/u/1/lesssecureapps

Request Method: 	POST
Request URL: 	http://127.0.0.1:8000/accounts/register/
Django Version: 	4.2
Exception Type: 	SMTPSenderRefused


Como hay problemas con el tema de gmail ver este video...

https://www.youtube.com/watch?v=kZnTFUvc1ig